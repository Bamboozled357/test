""" Classwork
1) Создайте класс Passport, в котором есть следующие атрибуты:
Атрибут класса users_images, в котором хранится пустой список, и атрибут класса black_list - тоже пустой список
Атрибуты экземпляра класса при инициализации объекта: name, last_name, date_of_birth, image, INN (INN при создании объекта равен None)
Метод check_dublicate_person, который при вызове через созданный объект класса, заносит атрибут данного объекта image в список users_image, если такой фотографии еще нет, если же она уже есть, т.е. если человек с такой фотографией уже есть в нашей “базе данных”, то этот объект-человек, через который мы вызвали данный метод, заносится в черный список. 
Также есть метод get_inn, который выдает сгенерированный INN для объекта. INN должен содержать какое-то число от 1999999-19999999. Но если объект находится в черном списке, то метод get_inn выдает сообщение: “Для объекта черного списка INN не генерируется”
По надобности переопределите методы __str__ или __repr__
Создайте объекты от класса Passport и вызовите у каждого объекта метод check_dublicate_person и метод get_inn. Также проверьте черный список и users_images. 
"""
# class Passport:
#     users_images = []
#     black_list = []
#     _INN = None

#     def __init__(self, name, last_name, date_of_birth, image, _INN):
#         self.name = name
#         self.familia = last_name
#         self.birth = date_of_birth
#         self.image = image
#         self.INN = _INN

#     def check_dublicate_person(self):



''' Homework
1. Dollar.
Создайте функцию dollarize, которая принимает дробное число (float) и переводит его в
долларизованный формат:
dollarize(123456.78901) -> "$123,456.80"
dollarize(-123456.7801) -> "-$123,456.78"
dollarize(1000000) -> "$1,000,000
Создайте класс MoneyFmt, который содержит один единственный атрибут amount и 4 метода:
- init - инициализирует значение атрибута amount
- update - задаёт объекту новое значение amount
- repr - возвращает значение float
- str - метод, который реализует логику функции dollarize()

//Вывод должен выглядеть следующим образом:
cash = MoneyFmt(12345678.021)
print(cash) -- выводит "$12,345,678.02"
cash.update(100000.4567)
print(cash) -- выводит "$100,000.46"
cash.update(-0.3)
print(cash) -- выводит "-$0.30"
repr(cash) -- выводит -0.3 
'''


# class MoneyFmt:
#     amount = 0

#     @staticmethod
#     def dollarize(float):
#         return f"${float}" 

#     def __init__(self, value):
#         self.value = value

#     def update(self):
#         pass

#     def __repr__(self):
#         pass

#     def __str__(self):
#         pass



'''
2. Велосипед.
Создайте класс Bike в котором будут инициализированы следующие атрибуты: self.cost
(стоимость)
self.make (производитель)
self.model (модель)
self.year (год выпуска)
self.condition (состояние)
self._sale_price = None (цена для продажи, по умолчанию None)
self.sold = False (продан или нет, по умолчания False)

Также укажите мин. прибыль, которая должна прийти с продажи велосипеда. Создайте метод
для указания цены для продажи, который принимает цену и если она меньше стоимости, то
ставит дефолтную цену для продажи (стоимость + мин. прибыль).

Для ремонта велосипеда будет использоваться метод service, которая принимает стоимость
ремонта и новое состояние велосипеда, соответственно продажная цена велосипеда
возрастает на столько, сколько обошелся ремонт и возвращает нынешнюю цену для продажи.
При продаже велосипеда будет использоваться метод sell, который меняет значение self.sold на True
и возвращает прибыль с продажи.

Допишите метод get_default_bike, который будет создавать дефолтный велосипед. Создайте
объект bike = Bike.get_default_bike() и используете его методы и получите значения всех его
атрибутов.
'''

#write your code here

'''
3. Герой.
Разработайте программу по следующему описанию.
В некой игре-стратегии есть солдаты и герои. У всех есть свойство, содержащее
уникальный номер объекта, и свойство, в котором хранится принадлежность команде. У
солдат есть метод "иду за героем", который в качестве аргумента принимает объект типа
"герой". У героев есть метод увеличения собственного уровня.
В основной ветке программы создается по одному герою для каждой команды. В цикле
генерируются объекты-солдаты. Их принадлежность команде определяется случайно.
Солдаты разных команд добавляются в разные списки.
Измеряется длина списков солдат противоборствующих команд и выводится на экран. У
героя, принадлежащего команде с более длинным списком, поднимается уровень.
Отправьте одного из солдат первого героя следовать за ним. Выведите на экран
идентификационные номера этих двух юнитов.
'''
# import random


# class Game:


#     def create_soldier(self):
#         for soldier in range(10):
#             a = random.choice([hero1, hero2])
#             a.new_soldier(random.randrange(20))
#         if len(hero1.soldier_count) > len(hero2.soldier_count):
#             hero1.level_up()
#         else:
#             hero2.level_up()




# class Hero(Game):


#     def __init__(self, name):
#         self.name = name
#         self.level = 0
#         self.soldier_count = []

#     def level_up(self):
#         self.level += 1

#     def new_soldier(self, soldier_id):
#         self.soldier_count.append(soldier_id)

#     def __str__(self):
#         return self.name

# hero1 = Hero('Arstan')
# hero2 = Hero('Spartacus')


# class Soldier(Game):


#     def __init__(self, id):
#         self.id = id

#     def follow_hero(self, hero):
#         return f"Солдат под номером {hero2.soldier_count[2]}: Иду за героем{hero}"

#     def __str__(self):
#         return self.id

# game1 = Game()
# game1.create_soldier()


'''
4. Напишите класс учеников Makers, который будет содержать 4 атрибута: 

- атрибут экземпляра name (имя студента)
- атрибут класса students_count (количество учеников)
- атрибут экземпляра класса language (язык, которому обучается студент)
- атрибут экземпляра класса kpi (оценка студента)

Также класс должен содержать следующие методы:

- метод, который будет создавать нового ученика, и при этом увеличивать количество студентов на 1.
- метод который будет выводит имя и язык, выбранный учеником.
- а также метод, который будет устанавливать оценку ученику.
'''

#write your code here

"""Extra Task"""
'''
1. Создайте класс, который регистрирует пользователя. Пользователь вводит свою почту, пароль и подтверждение 
    пароля, класс валидирует данные, то есть проверяет совпадает ли пароль с подтверждением пароля, если 
    проверка прошла, то класс регистрирует пользователя и выводит сообщение, в котором оповещает пользователя
    о регистрации, а также выводит его почту. Также в классе есть метод, который может логинить пользователя, то есть после 
    регистрации, пользователь может залогиниться, метод должен проверить, регистрировался ли
    пользователь ранее, если такой пользователь регистрировался, залогинить его, если нет, вывести сообщение об этом.
'''